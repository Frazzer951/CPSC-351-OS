#include <cctype>
#include <cstdio>
#include <cstdlib>
#include <pthread.h>
#include <vector>

/*
PART A: Computing Fibonacci Numbers With Threads [ 50 points ]
The Fibonacci sequence is the series of numbers 0, 1, 1, 2, 3, 5, 8,....  Formally, it can be expressed as:
fib0 = 0
fib1 = 1
fibn = fibn-1 + fibn-2
Write a C++ program that generates the Fibonacci series using the pthread library. This program should work as follows:
The user will enter on the command line the number of Fibonacci numbers that the program will generate. The program will
then create a thread that will generate the Fibonacci numbers placing the sequence in a global data structure that is
shared by the thread and parent thread (a vector is probably the most convenient data structure). Note that the thread
function should be iterative when calculating fibonacci (can be recursive, but maybe difficult to implement). When the
thread finishes execution, the parent thread will output the sequence generated by the child thread. Because the parent
thread cannot begin outputting the Fibonacci sequence until the child thread finishes, this will require having the
parent thread wait for the child thread to finish, using the techniques described in lectures pertaining to threads.
Note that the vector should only have those many terms as the user wanted. The name of this program must be
fibonacci.cpp
*/

std::vector<int> fib;

void * fibonacci( void * param );

int main( int argc, char * argv[] )
{
  pthread_t p1;

  if( argc != 2 )
  {
    fprintf( stderr, "usage: %s <integer value>\n", argv[0] );
    return -1;
  }

  if( !isdigit( argv[1][0] ) )
  {
    fprintf( stderr, "%s is not a valid integer\n", argv[1] );
    return -1;
  }

  pthread_create( &p1, NULL, fibonacci, argv[1] );

  pthread_join( p1, NULL );

  printf( "Fibonacci sequence: " );

  for( int i : fib ) { fprintf( stdout, "%d ", i ); }

  printf( "\n" );
}

void * fibonacci( void * param )
{
  int fib_count = atoi( (char *) param );

  int i = 0;
  while( i < fib_count )
  {
    if( i == 0 ) fib.push_back( 0 );
    else if( i == 1 )
      fib.push_back( 1 );
    else
      fib.push_back( fib[i - 1] + fib[i - 2] );
    i++;
  }

  pthread_exit( 0 );
}